@using Microsoft.AspNetCore.Identity;
@model BlogBook.Model.Post
@inject SignInManager<IdentityUser> SignInManager

@{
	ViewData["Title"] = "Index";
	var isSigned = SignInManager.IsSignedIn(User);
	var userName = User?.Identity?.Name ?? "";

	var maxLength = 500;
}

@functions {
	string lmnoga(int n, string s1, string s2, string s3)
	{
		return (n == 1 ? s1 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? s2 : s3);
	}

	bool WillBeTruncated(string? value, int maxLength)
	{
		if (value == null) return false;

		if (value?.Length > maxLength)
		{
			return true;
		}

		return value?.Count(c => c == '\n') > 5;
	}

	string? Truncate(string? value, int maxLength, string truncationSuffix = "…")
	{
		if (!WillBeTruncated(value, maxLength)) return value;

		var len = maxLength;
		if (value?.Count(c => c == '\n') > 5)
		{
			var ix = 0;
			for (int i = 0; i < 5; ++i)
			{
				ix = value.IndexOf('\n', ix) + 1;
			}
			len = ix;
		}

		return value.Substring(0, len) + truncationSuffix;
	}
}

<div class="card shadow-sm">
	<div class="card-header d-flex">
		<div class="flex-grow-1 bd-highlight">
			<a href="@Url.Page("/Profile", new { userName = Model.User.UserName })">
				<strong>@Html.DisplayFor(modelItem => Model.User.UserName)</strong>
			</a>
		</div>
		<div class="bd-highlight">
			@if (Model.EditDate == DateTime.MinValue || Model.EditDate == Model.PostDate)
			{
				<em>@Html.DisplayFor(modelItem => Model.PostDate)</em>
			}
			else
			{
				<em>@Html.DisplayFor(modelItem => Model.PostDate), zmodyfikowano: @Html.DisplayFor(modelItem => Model.EditDate)</em>
			}
		</div>
	</div>
	<div class="card-body">
		<h3 class="card-title">
			<a href="@Url.Action("Details", "Posts", new { id = Model.Id })" >
				@Html.DisplayFor(modelItem => Model.Title)
			</a>
		</h3>
		<p class="card-text crop-text" style="white-space: pre-line">@Truncate(Model.Content, maxLength)</p>
		@if (WillBeTruncated(Model.Content, maxLength))
		{
			<a href="@Url.Action("Details", "Posts", new { id = Model.Id })">Zobacz więcej ></a>
		}
	</div>
	<div class="card-footer d-flex align-items-center gap-3">
		<div class="bd-highlight ms-auto">
			<strong>
				@Html.DisplayFor(modelItem => Model.Likes)
				@(lmnoga(Model.Likes, "Polubienie", "Polubienia", "polubień"))
			</strong>
		</div>
		<div class="bd-highlight">
			<button type="button" class="btn btn-sm @( !isSigned || Model.User.UserName == userName ? "btn-outline-secondary disabled" : "btn-outline-success" )">
				<i class="bi bi-hand-thumbs-up"></i>
			</button>
		</div>
	</div>
</div>